name: Packer Build Workflow

on:
  push:
    branches:
      - main
jobs:
  Artifact_Config_Setup:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Decode JSON secret
        run: |
          echo "${{ secrets.SERVICE_AUTH }}" | base64 --decode > data.json
          cat data.json

      # - name: Decode Monitor auth JSON secret
      #   run: |
      #     echo "${{ secrets.MONITOR_AUTH }}" | base64 --decode > monitor_auth.json
      #     cat monitor_auth.json
        

      - name: Zip project
        run: |
          zip -r webapp.zip .
        working-directory: ../
        id: zip

      - name: Set output variable
        run: echo "WEBAPP_ZIP_PATH=/home/runner/work/webapp/webapp.zip" >> $GITHUB_ENV

      - name: Print WEBAPP_ZIP_PATH
        run: echo "WEBAPP_ZIP_PATH=${{ env.WEBAPP_ZIP_PATH }}"

      - name: List contents of the directory
        run: |
            cd /home/runner/work/webapp/webapp
            ls -la

      - name: Run Packer build
        run: |
          packer init packer.pkr.hcl
          packer build --force \
          -var 'auth_file=data.json' \
          -var 'project_path=/home/runner/work/webapp/webapp.zip' \
          -var 'project_id=${{ secrets.PROJECT_ID }}' \
          -var 'gcp_region=${{ secrets.GCP_REGION }}' \
          -var 'gcp_zone=${{ secrets.GCP_ZONE }}' \
          -var 'gcp_profile=${{ secrets.GCP_PROFILE }}' \
          -var 'source_image=${{ secrets.SOURCE_IMAGE }}' \
          -var 'ssh_username=${{ secrets.SSH_USERNAME }}' \
          packer.pkr.hcl

  deploy:
    needs: Artifact_Config_Setup
    
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: 'auth'
        uses: google-github-actions/auth@v0.4.0
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          export_default_credentials: true

      - name: Set timestamp
        id: timestamp
        run: |
            timestamp=$(date +%Y%m%d%H%M%S)
            echo "TIMESTAMP=$timestamp" >> $GITHUB_ENV

      - name: Fetch secrets from Secret Manager
        id: fetch-secrets
        uses: google-github-actions/get-secretmanager-secrets@v2
        with:
          secrets: | 
            DB_NAME: projects/webapp-dev-414902/secrets/sql-database/versions/latest
            DB_USER: projects/webapp-dev-414902/secrets/sql-user/versions/latest
            DB_PASSWORD: projects/webapp-dev-414902/secrets/sql-password/versions/latest
            DB_HOST: projects/webapp-dev-414902/secrets/sql-instance-ip/versions/latest
            DB_PORT: projects/webapp-dev-414902/secrets/sql-port/versions/latest
      
      - name: Binding cryptokeys
        run: |
          gcloud kms keys add-iam-policy-binding VM-CMEK \
          --location us-east1 \
          --keyring keyring-03 \
          --member serviceAccount:monitoring-account@webapp-dev-414902.iam.gserviceaccount.com \
          --role roles/cloudkms.cryptoKeyEncrypterDecrypter \
          --project webapp-dev-414902

      - name: Create GCP VM Template
        run: |
            gcloud compute instance-templates create webapp-instance-vpc1-${{ env.TIMESTAMP }} \
            --project=webapp-dev-414902 \
            --machine-type=e2-small \
            --subnet=webapp-vpc1 \
            --network=vpc1 \
            --instance-template-region=us-east1 \
            --metadata=wait_for_guest_attributes=true,startup-script='#!/bin/bash
              # Navigate to the root directory
              cd /opt

              sudo touch /opt/db-startup.sh

              # Set environment variables file path
              ENV_FILE="/home/packer/webapp/.env"

              # Create or overwrite the .env file with database credentials
              tee "$ENV_FILE" > /dev/null <<EOF
              DB_NAME=${{ steps.fetch-secrets.outputs.DB_NAME }}
              DB_USER=${{ steps.fetch-secrets.outputs.DB_USER }}
              DB_PASSWORD="${{ steps.fetch-secrets.outputs.DB_PASSWORD }}"
              DB_HOST="${{ steps.fetch-secrets.outputs.DB_HOST }}"
              DB_PORT=${{ steps.fetch-secrets.outputs.DB_PORT }}
              NODE_ENV=prod
              EOF

              # Change ownership of the .env file
              chown csye6225:csye6225 "$ENV_FILE"
              ' \
            --maintenance-policy=MIGRATE \
            --provisioning-model=STANDARD \
            --service-account=monitoring-account@webapp-dev-414902.iam.gserviceaccount.com \
            --scopes=https://www.googleapis.com/auth/cloud-platform \
            --region=us-east1 \
            --tags=load-balancer \
            --create-disk=auto-delete=yes,boot=yes,device-name=persistent-disk-0,image=projects/webapp-dev-414902/global/images/webapp-image,mode=rw,size=100,type=pd-balanced,kms-key=projects/webapp-dev-414902/locations/us-east1/keyRings/keyring-13/cryptoKeys/VM-CMEK \
            --no-shielded-secure-boot \
            --shielded-vtpm \
            --shielded-integrity-monitoring \
            --reservation-affinity=any \
      
      - name: Setting Named Port on MIG
        run: |
          gcloud compute instance-groups managed set-named-ports webapp-instance-group \
          --named-ports=http:3000 \
          --region=us-east1
      
      - name: updating MIG with health check
        run: |
          gcloud compute instance-groups managed update webapp-instance-group \
          --health-check=projects/webapp-dev-414902/regions/us-east1/healthChecks/webapp-health-check \
          --initial-delay=300 \
          --region=us-east1 \

      - name: Start Rolling Update
        run: |
          gcloud compute instance-groups managed rolling-action start-update webapp-instance-group \
          --region=us-east1 \
          --version=template=projects/webapp-dev-414902/regions/us-east1/instanceTemplates/webapp-instance-vpc1-${{ env.TIMESTAMP }}

      - name: Wait for Recreate Instances to Complete
        run: |
          echo "Waiting for the MIG update to complete..."
          gcloud compute instance-groups managed wait-until webapp-instance-group \
            --version-target-reached \
            --region=us-east1
          echo "Update completed successfully."